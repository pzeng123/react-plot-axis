{"version":3,"sources":["lib/DateXAxis.js","lib/DateVerticalLineGrid.js","lib/YAxis.js","lib/YAxisSlabGrid.js","index.js"],"names":["DateXAxis","props","ref","React","createRef","displayDayAlready","this","width","height","style","display","draw","minX","maxX","tickPosition","fontSize","isItalic","fontWeight","strokeStyle","lineWidth","draw_memo","validFromDiff","validToDiff","rangeMinX","rangeMaxX","memo","diffX","generateDateGrids","grids","gridLabels","getGridLabels","startIndex","Math","max","bisect_right","endIndex","min","length","bisect_left","filteredArr","slice","newArr","interval","getInterval","forEach","element","push","moment","isDST","CUSTOM_DAY_START_HOUR","newTs","sort","a","b","domXs","map","x","toDomXCoord_Linear","ctx","current","getContext","clearRect","textPlot","ticPlot","arr","dict","i","curInterval","startTs","floor","endTs","ceil","currentTs","SHIFT_HOURS_DST","SHIFT_HOURS_NON_DST","labels","t","Date","grid","setTime","getMeaningfulDateField","d","getMilliseconds","getSeconds","getMinutes","getHours","getDate","getMonth","format","texts","textAlign","textBaseline","font","text","round","y","fillText","beginPath","moveTo","lineTo","stroke","PureComponent","DateVerticalLineGrid","majorGrids","minorGrids","generateMinorGrids","majorGridStartIndex","majorGridEndIndex","majorGridDomXs","minorGridStartIndex","minorGridEndIndex","minorGridDomXs","globalAlpha","verticalLinePlot","prevGrid","YAxis","minY","maxY","rangeMinY","rangeMaxY","diffY","generateGrids","domYs","toDomYCoord_Linear","Number","parseFloat","toFixed","YAxisSlabGrid","drawSlab","fillStyle","fillRect","prevY","currentY","rectHeight","DateXAxisBundle","state","type","step","value","onChange","ev","setState","parseInt","target","drawAdditionalDates","heightAdditionalDates","Component","DateVerticalLineGridBundle","flexDirection","YAxisBundle","YAxisSlabGridBundle","widtDateXAxish","App","className","to","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6f264a2.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { bisect_left, bisect_right } from \"bisect\";\nimport { toDomXCoord_Linear, generateDateGrids } from \"plot-utils\";\nimport { format } from \"date-fns\";\nimport moment from \"moment\";\n\n// shift from UTC to EDT(with DST) or EST(without DST)\n// numbers are only for EDT/EST\nconst SHIFT_HOURS_DST = 4;\nconst SHIFT_HOURS_NON_DST = 5;\nconst CUSTOM_DAY_START_HOUR = 7;\n\nclass DateXAxis extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.displayDayAlready = true;\n  }\n\n  render() {\n    let { width, height } = this.props;\n    return (\n      <canvas\n        ref={this.ref}\n        width={width}\n        height={height}\n        style={{ width: width, height: height, display: \"block\" }}\n      ></canvas>\n    );\n  }\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let {\n      minX,\n      maxX,\n      width,\n      height,\n      tickPosition,\n      fontSize,\n      isItalic,\n      fontWeight,\n      strokeStyle,\n      lineWidth\n    } = this.props;\n    this.draw_memo = this.draw_memo || {\n      validFromDiff: 0,\n      validToDiff: -1,\n      rangeMinX: 0,\n      rangeMaxX: -1\n    };\n    let memo = this.draw_memo;\n    let diffX = maxX - minX;\n\n    // Generate grids, labels and bitmaps in cache\n    if (\n      memo.validFromDiff > diffX ||\n      diffX > memo.validToDiff ||\n      memo.rangeMinX > minX ||\n      maxX > memo.rangeMaxX\n    ) {\n      memo.rangeMinX = minX - 10 * diffX;\n      memo.rangeMaxX = maxX + 10 * diffX;\n      let { grids, validFromDiff, validToDiff } = generateDateGrids(\n        minX,\n        maxX,\n        memo.rangeMinX,\n        memo.rangeMaxX\n      );\n      memo.validFromDiff = validFromDiff;\n      memo.validToDiff = validToDiff;\n      memo.grids = grids;\n      memo.gridLabels = this.getGridLabels(grids);\n    }\n\n    // Filter\n    let startIndex = Math.max(0, bisect_right(memo.grids, minX));\n    let endIndex = Math.min(memo.grids.length - 1, bisect_left(memo.grids, maxX));\n    let filteredArr = memo.grids.slice(startIndex, endIndex + 1);\n    let newArr = [];\n\n    if (filteredArr && filteredArr.length > 2) {\n      let interval = this.getInterval(filteredArr);\n      if (interval === 12 * 3600 * 1000) {\n        // interval is 12 hours, add date display\n        filteredArr.forEach(element => {\n          newArr.push(element);\n          let shift_hours = moment(element).isDST() ? SHIFT_HOURS_DST : SHIFT_HOURS_NON_DST;\n          if (element % (86400 * 1000) === (CUSTOM_DAY_START_HOUR + shift_hours) * 3600 * 1000) {\n            if (\n              moment(element - CUSTOM_DAY_START_HOUR * 3600 * 1000).isDST() !==\n              moment(element).isDST()\n            ) {\n              let newTs = element - CUSTOM_DAY_START_HOUR * 3600 * 1000;\n              if (moment(newTs).isDST()) {\n                // DST to non DST\n                newArr.push(newTs - 3600*1000);\n              } else {\n                newArr.push(newTs);\n              }\n            } else {\n              newArr.push(element - CUSTOM_DAY_START_HOUR * 3600 * 1000);\n            }\n          }\n        });\n      } else if (interval <= 6 * 3600 * 1000 && interval >= 3600 * 1000) {\n        // interval is between 1 hour and 16 hours\n        filteredArr.forEach(element => {\n          let shift_hours = moment(element).isDST() ? SHIFT_HOURS_DST : SHIFT_HOURS_NON_DST;\n          if (element % (86400 * 1000) === (1 + shift_hours) * 3600 * 1000) {\n            let newTs = element - 3600*1000;\n            if (moment(newTs).isDST()) {\n              // DST to non DST\n              newArr.push(newTs - 3600*1000);\n              if (interval !== 6 * 3600 * 1000) {\n                newArr.push(newTs);\n              }\n              if (interval <= 3 * 3600 * 1000) {\n                newArr.push(element);\n              }\n            } else {\n              newArr.push(newTs);\n              if (interval !== 6 * 3600 * 1000) {\n                newArr.push(element);\n              }\n            }            \n          } else {\n            newArr.push(element);\n          }\n        });\n      } else {\n        newArr = filteredArr;\n      }\n    } else {\n      newArr = filteredArr;\n    }\n    // adjusted for daylight saving time and dates, time points array newArr size is small: ~10\n    newArr.sort((a, b) => a - b);\n\n    let domXs = newArr.map(x => toDomXCoord_Linear(width, minX, maxX, x));\n    let gridLabels = this.getGridLabels(newArr);\n\n    // Plot\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, width, height);\n\n    if (fontSize && fontWeight) {\n      this.textPlot(ctx, width, height, domXs, gridLabels, fontSize, fontWeight, isItalic);\n    } else {\n      this.textPlot(ctx, width, height, domXs, gridLabels, 12, 400, isItalic);\n    }\n    this.ticPlot(ctx, width, height, domXs, tickPosition, strokeStyle, lineWidth);\n\n    // // if need display day, plot day text and line\n    // if (drawAdditionalDates && !this.displayDayAlready) {\n    //   let dayArr = this.getDayArr(minX, maxX);\n    //   let dayDomXs = dayArr.map(x=> toDomXCoord_Linear(width, minX, maxX, x));\n    //   let dayGridLabels = dayArr.map(x=> {\n    //     let t = new Date();\n    //     t.setTime(x);\n    //     return format(t, \"Do\");\n    //   });\n    //   let dayHeight = heightAdditionalDates === null || heightAdditionalDates === undefined ? height + 15 : height + heightAdditionalDates;\n    //   if (fontSize && fontWeight) {\n    //     this.textPlot(ctx, width, dayHeight, dayDomXs, dayGridLabels, fontSize, fontWeight, isItalic);\n    //   } else {\n    //     this.textPlot(ctx, width, dayHeight, dayDomXs, dayGridLabels, 12, 400, isItalic);\n    //   }\n    //   let dayTickPosition = tickPosition===\"top\"? \"bottom\" : \"top\";\n    //   this.ticPlot(ctx, width, height, dayDomXs, dayTickPosition, strokeStyle, lineWidth);\n    // }\n  }\n\n  getInterval(arr) {\n    if (arr.length === 3) {\n      let a = (arr[1] - arr[0])/3600000;\n      let b = (arr[2] - arr[1])/3600000;\n      if (a === 12 || b === 12) {\n        return 12 * 3600*1000;\n      } else if (a === 6 || b === 6) {\n        return 6 * 3600*1000;\n      } else {\n        return Math.min(a, b) * 3600*1000;\n      }\n    }\n\n    let dict = {};\n    for (let i = 1; i < arr.length; i++) {\n      let curInterval = arr[i] - arr[i-1];\n      if (curInterval in dict) {\n        return curInterval;\n      } else {\n        dict[curInterval] = 1;\n      }\n    }\n    return null;\n  }\n\n\n  getDayArr(minX, maxX) {\n    let startTs = Math.floor(minX / 86400000) * 86400000;\n    let endTs = Math.ceil(maxX / 86400000) * 86400000;\n    let arr = [];\n    for (let i = 0; i < endTs - startTs; i = i + 86400000) {\n      let currentTs = startTs + i + SHIFT_HOURS_DST * 3600000;\n      if (moment(currentTs).isDST()) {\n        arr.push(startTs + i + SHIFT_HOURS_DST * 3600000);\n      } else {\n        arr.push(startTs + i + SHIFT_HOURS_NON_DST * 3600000);\n      }\n    }\n    return arr;\n  }\n\n  getGridLabels(grids) {\n    let labels = [];\n    let t = new Date();\n    for (let grid of grids) {\n      t.setTime(grid);\n      labels.push(this.getMeaningfulDateField(t));\n    }\n    return labels;\n  }\n\n  getMeaningfulDateField(d) {\n    this.displayDayAlready = true;\n    if (d.getMilliseconds() === 0) {\n      if (d.getSeconds() === 0) {\n        if (d.getMinutes() === 0) {\n          if (d.getHours() === 0) {\n            if (d.getDate() === 1) {\n              if (d.getMonth() === 0) {\n                return format(d, \"YYYY\");\n              }\n              return format(d, \"MMM\");\n            }\n            return format(d, \"Do\");\n          }\n          this.displayDayAlready = false;\n          return format(d, \"HH:00\");\n        }\n        this.displayDayAlready = false;\n        return format(d, \"HH:mm\");\n      }\n      this.displayDayAlready = false;\n      return format(d, \"HH:mm:ss\");\n    }\n    this.displayDayAlready = false;\n    return format(d, \"ss.SSS\");\n  }\n\n  textPlot(ctx, width, height, domXs, texts, fontSize, fontWeight, isItalic) {\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n\n    if (isItalic) {\n      ctx.font = \"italic \" + fontWeight + \" \" + fontSize + \"px MuseoSans, Sans\";\n    } else {\n      ctx.font = fontWeight + \" \" + fontSize + \"px MuseoSans, Sans\";\n    }\n\n    for (let i = 0; i < domXs.length; i++) {\n      let text = texts[i];\n      let x = Math.round(domXs[i]);\n      let y = Math.round(height / 2);\n      ctx.fillText(text, x, y);\n    }\n  }\n\n  ticPlot(ctx, width, height, domXs, tickPosition, strokeStyle, lineWidth) {\n    if (strokeStyle) {\n      ctx.strokeStyle = strokeStyle;\n    }\n\n    if (lineWidth) {\n      ctx.lineWidth = lineWidth;\n    }\n\n    switch (tickPosition) {\n      case \"top\":\n      default:\n        ctx.beginPath();\n        for (let x of domXs) {\n          ctx.moveTo(Math.round(x) + 0.5, 0);\n          ctx.lineTo(Math.round(x) + 0.5, 10);\n        }\n        ctx.moveTo(0, 0.5);\n        ctx.lineTo(width, 0.5);\n        ctx.stroke();\n        break;\n      case \"bottom\":\n        ctx.beginPath();\n        for (let x of domXs) {\n          ctx.moveTo(Math.round(x) + 0.5, height - 10);\n          ctx.lineTo(Math.round(x) + 0.5, height);\n        }\n        ctx.moveTo(0, height - 0.5);\n        ctx.lineTo(width, height - 0.5);\n        ctx.stroke();\n        break;\n    }\n  }\n}\n\nDateXAxis.propTypes = {\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  tickPosition: PropTypes.string.isRequired\n};\n\nexport default DateXAxis;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {bisect_left,bisect_right} from \"bisect\";\nimport {toDomXCoord_Linear,generateDateGrids} from \"plot-utils\";\n\nclass DateVerticalLineGrid extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref= React.createRef();\n  }\n  \n  render() {\n    let { width,\n          height} = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={1} style={{display:\"block\",height:height,width:width}}></canvas>\n    );\n  }\n  \n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate() {\n    this.draw();\n  }\n  \n  draw() {\n    let {minX,maxX,width} = this.props;\n    let diffX = maxX-minX;\n    // Generate grid if needed\n    this.draw_memo = this.draw_memo || {validFromDiff:0, validToDiff: -1, rangeMinX:0, rangeMaxX: -1};\n    let memo = this.draw_memo;\n    if (memo.validFromDiff>diffX ||\n        diffX>memo.validToDiff ||\n        memo.rangeMinX>minX ||\n        maxX>memo.rangeMaxX\n        ) {\n      memo.rangeMinX = minX-10*diffX;\n      memo.rangeMaxX = maxX+10*diffX;\n      let {grids, validFromDiff, validToDiff} = generateDateGrids(minX,maxX,memo.rangeMinX,memo.rangeMaxX);\n      memo.validFromDiff = validFromDiff;\n      memo.validToDiff = validToDiff;\n      memo.majorGrids = grids;\n      memo.minorGrids = this.generateMinorGrids(grids);\n    }\n    // Filter\n    let majorGridStartIndex = Math.max(0,bisect_left(memo.majorGrids,minX));\n    let majorGridEndIndex = Math.min(memo.majorGrids.length-1,bisect_right(memo.majorGrids,maxX));\n    let majorGridDomXs = memo.majorGrids.slice(majorGridStartIndex,majorGridEndIndex+1)\n                              .map( (x)=>toDomXCoord_Linear(width,minX,maxX,x));\n    let minorGridStartIndex = Math.max(0,bisect_right(memo.minorGrids,minX));\n    let minorGridEndIndex = Math.min(memo.minorGrids.length-1,bisect_left(memo.minorGrids,maxX));\n    let minorGridDomXs = memo.minorGrids.slice(minorGridStartIndex,minorGridEndIndex+1)\n                                        .map( (x)=>toDomXCoord_Linear(width,minX,maxX,x));\n    // Draw\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,1);\n    ctx.globalAlpha = 0.3;\n    this.verticalLinePlot(ctx,width,1,majorGridDomXs);\n    ctx.globalAlpha = 0.15;\n    this.verticalLinePlot(ctx,width,1,minorGridDomXs);\n  }\n  \n  verticalLinePlot(ctx,width,height,domXs){\n    let x = null;\n    ctx.beginPath();\n    for (let i=0; i<domXs.length; i++) {\n      x = Math.round(domXs[i]);\n      ctx.moveTo(0.5+x,0);\n      ctx.lineTo(0.5+x,height);\n    }\n    ctx.stroke();\n  }\n  \n  generateMinorGrids(grids) {\n    if (grids.length===0) {\n      return [];\n    }\n    let minorGrids = [];\n    let prevGrid = grids[0];\n    for (let grid of grids){\n      minorGrids.push((grid+prevGrid)/2);\n      prevGrid = grid;\n    }\n    return minorGrids;\n  }\n}\n\nDateVerticalLineGrid.propTypes = {\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n}\n\nexport default DateVerticalLineGrid;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\"; \nimport {bisect_left, bisect_right} from \"bisect\";\nimport {toDomYCoord_Linear, generateGrids} from \"plot-utils\";\n\nclass YAxis extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref= React.createRef();\n  }\n  \n  render() {\n    let {width,height} = this.props;\n    return (\n      <canvas ref={this.ref}  width={width} height={height}\n                              style={{width:width,height:height,display:\"block\"}}\n                              >\n      </canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let { minY,maxY,\n          width,height,\n          tickPosition} = this.props;\n    this.draw_memo = this.draw_memo || {validFromDiff:0,validToDiff:-1,rangeMinY:0,rangeMaxY:-1};\n    let memo = this.draw_memo;\n    let diffY = maxY-minY;\n    // Generate grids, labels and bitmaps in cache\n    if (memo.validFromDiff>diffY ||\n        diffY>memo.validToDiff ||\n        memo.rangeMinY>minY ||\n        maxY>memo.rangeMaxY\n        ) {\n      memo.rangeMinY = minY-10*diffY;\n      memo.rangeMaxY = maxY+10*diffY;\n      let {grids, validFromDiff, validToDiff} = generateGrids(minY,maxY,memo.rangeMinY,memo.rangeMaxY);\n      memo.validFromDiff = validFromDiff;\n      memo.validToDiff = validToDiff;\n      memo.grids = grids;\n      memo.gridLabels = this.getGridLabels(grids);\n    }\n    // Filter\n    let startIndex = Math.max(0,bisect_right(memo.grids,minY));\n    let endIndex = Math.min(memo.grids.length-1,bisect_left(memo.grids,maxY));\n    \n    let domYs = memo.grids.slice(startIndex,endIndex+1).map( (y)=>toDomYCoord_Linear(height,minY,maxY,y));\n    let gridLabels = memo.gridLabels.slice(startIndex,endIndex+1);\n    // Plot\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,height);\n    this.textPlot(ctx,width,height,domYs,gridLabels);\n    this.ticPlot(ctx,width,height,domYs,tickPosition);\n  }\n  \n  getGridLabels(grids){\n    return grids.map((grid)=>{\n      if (grid>10 || grid<-10) {\n        return Math.round(grid);\n      }\n      else {\n        return Number.parseFloat(grid).toFixed(2)\n      }\n    });\n  }\n\n  textPlot(ctx,width,height,domYs,texts){\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    for (let i=0; i<domYs.length; i++) {\n      let text = texts[i];\n      let x = Math.round(width/2);\n      let y = Math.round(domYs[i]);\n      ctx.fillText(text,x,y);\n    }\n  }\n  \n  ticPlot(ctx,width,height,domYs,tickPosition){\n    let x;\n    switch (tickPosition) {\n      case \"left\":\n      default:\n        ctx.beginPath();\n        x = 5;\n        for (let y of domYs){\n          ctx.moveTo(0, Math.round(y));\n          ctx.lineTo(x, Math.round(y));\n        }\n        ctx.moveTo(0,0);\n        ctx.lineTo(0,height);\n        ctx.stroke();\n        break;\n      case \"right\":\n        ctx.beginPath();\n        x = width-5;\n        for (let y of domYs){\n          ctx.moveTo(x, Math.round(y));\n          ctx.lineTo(width, Math.round(y));\n        }\n        ctx.moveTo(width,0);\n        ctx.lineTo(width,height);\n        ctx.stroke();\n        break;\n    }\n  }\n}\n\nYAxis.propTypes = {\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  tickPosition: PropTypes.string.isRequired,\n}\n\nexport default YAxis;\n\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {bisect_left, bisect_right} from \"bisect\";\nimport {toDomYCoord_Linear, generateGrids} from \"plot-utils\";\n\nclass YAxisSlabGrid extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref= React.createRef();\n  }\n  \n  render() {\n    let {width,height} = this.props;\n    return (\n      <canvas ref={this.ref}  width={1} height={height}\n                              style={{width:width,height:height,display:\"block\"}}\n                              >\n      </canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let { minY,maxY,\n          width,height,\n          tickPosition} = this.props;\n    this.draw_memo = this.draw_memo || {validFromDiff:0,validToDiff:-1,rangeMinY:0,rangeMaxY:-1};\n    let memo = this.draw_memo;\n    let diffY = maxY-minY;\n    // Generate grids, labels and bitmaps in cache\n    if (memo.validFromDiff>diffY ||\n        diffY>memo.validToDiff ||\n        memo.rangeMinY>minY ||\n        maxY>memo.rangeMaxY\n        ) {\n      memo.rangeMinY = minY-10*diffY;\n      memo.rangeMaxY = maxY+10*diffY;\n      let {grids, validFromDiff, validToDiff} = generateGrids(minY,maxY,memo.rangeMinY,memo.rangeMaxY);\n      memo.validFromDiff = validFromDiff;\n      memo.validToDiff = validToDiff;\n      memo.grids = grids;\n    }\n    // Filter\n    let startIndex = Math.max(0,bisect_left(memo.grids,minY));\n    let endIndex = Math.min(memo.grids.length-1,bisect_right(memo.grids,maxY));\n    \n    let domYs = memo.grids.slice(startIndex,endIndex+1).map( (y)=>toDomYCoord_Linear(height,minY,maxY,y));\n    // Plot\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,1,height);\n    this.drawSlab(ctx,1,height,domYs);\n  }\n  \n  drawSlab(ctx,width,height,domYs){\n    ctx.fillStyle=\"#fffef9\";\n    ctx.fillRect(0,0,width,height);\n    if (domYs.length===0) {\n      return;\n    }\n    ctx.fillStyle=\"#fff7e4\";\n    let prevY = domYs[0];\n    for (let i=1; i<domYs.length; i++) {\n      let currentY = Math.round(domYs[i]);\n      let rectHeight = Math.round((prevY+currentY)/2)-prevY;\n      ctx.fillRect(0,prevY,1,rectHeight);\n      prevY = currentY;\n    }\n  }\n}\n\nYAxisSlabGrid.propTypes = {\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n}\n\nexport default YAxisSlabGrid;\n\n\n","import React, { Component, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DateXAxis, DateVerticalLineGrid, YAxis, YAxisSlabGrid } from \"./lib\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n\n// CSS\nimport \"./index.css\";\n\nconst INIT_MINX = 1541111200000;\nconst INIT_MAXX = 1541611200000;\n\nclass DateXAxisBundle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 1000,\n      height: 50,\n      minX: INIT_MINX,\n      maxX: INIT_MAXX,\n      tickPosition: \"top\"\n    };\n  }\n\n  render() {\n    let { width, height, minX, maxX, tickPosition } = this.state;\n    return (\n      <Fragment>\n        <div>\n          width:\n          <input type=\"range\" min={800} max={1600} step={1}\n            value={width}\n            onChange={(ev) => this.setState({ width: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          height:\n          <input type=\"range\" min={50} max={100} step={1}\n            value={height}\n            onChange={(ev) => this.setState({ height: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          minX:\n          <input type=\"range\" min={INIT_MINX} max={maxX} step={1}\n            value={minX}\n            onChange={(ev) => this.setState({ minX: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          maxX:\n          <input type=\"range\" min={minX} max={INIT_MAXX} step={1}\n            value={maxX}\n            onChange={(ev) => this.setState({ maxX: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          tickPosition:\n          <select value={tickPosition}\n            onChange={(ev) => this.setState({ tickPosition: ev.target.value })}>\n            <option value=\"top\">top</option>\n            <option value=\"bottom\">bottom</option>\n          </select>\n        </div>\n        <DateXAxis width={width}\n          height={height}\n          minX={minX}\n          maxX={maxX}\n          tickPosition={tickPosition}\n          fontSize={13}\n          fontWeight={200}\n          strokeStyle=\"gray\"\n          lineWidth={2}\n          isItalic={true}\n          drawAdditionalDates={true}\n          heightAdditionalDates={5}\n        />\n      </Fragment>\n    );\n  }\n}\n\nclass DateVerticalLineGridBundle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 1000,\n      height: 50,\n      minX: 0,\n      maxX: 100000000000,\n      tickPosition: \"top\"\n    };\n  }\n\n  render() {\n    let { width, height, minX, maxX, tickPosition } = this.state;\n    return (\n      <Fragment>\n        <div>\n          width:\n          <input type=\"range\" min={800} max={1600} step={1}\n            value={width}\n            onChange={(ev) => this.setState({ width: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          height:\n          <input type=\"range\" min={100} max={500} step={1}\n            value={height}\n            onChange={(ev) => this.setState({ height: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          minX:\n          <input type=\"range\" min={-100000000000} max={maxX} step={1}\n            value={minX}\n            onChange={(ev) => this.setState({ minX: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          maxX:\n          <input type=\"range\" min={minX} max={100000000000} step={1}\n            value={maxX}\n            onChange={(ev) => this.setState({ maxX: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <DateVerticalLineGrid width={width} height={height}\n            minX={minX} maxX={maxX}\n          />\n          <DateXAxis\n            width={width}\n            height={50}\n            minX={minX}\n            maxX={maxX}\n            tickPosition=\"top\"\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nclass YAxisBundle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 50,\n      height: 400,\n      minY: 0,\n      maxY: 10000,\n      tickPosition: \"left\"\n    };\n  }\n\n  render() {\n    let { width, height, minY, maxY, tickPosition } = this.state;\n    return (\n      <Fragment>\n        <div>\n          width:\n          <input type=\"range\" min={50} max={100} step={1}\n            value={width}\n            onChange={(ev) => this.setState({ width: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          height:\n          <input type=\"range\" min={200} max={800} step={1}\n            value={height}\n            onChange={(ev) => this.setState({ height: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          minY:\n          <input type=\"range\" min={-10000} max={maxY} step={1}\n            value={minY}\n            onChange={(ev) => this.setState({ minY: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          maxY:\n          <input type=\"range\" min={minY} max={10000} step={1}\n            value={maxY}\n            onChange={(ev) => this.setState({ maxY: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          tickPosition:\n          <select value={tickPosition}\n            onChange={(ev) => this.setState({ tickPosition: ev.target.value })}>\n            <option value=\"left\">left</option>\n            <option value=\"right\">right</option>\n          </select>\n        </div>\n        <YAxis width={50} height={height}\n          minY={minY} maxY={maxY}\n          tickPosition=\"left\"\n        />\n      </Fragment>\n    );\n  }\n}\n\nclass YAxisSlabGridBundle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 800,\n      height: 400,\n      minY: 0,\n      maxY: 10000,\n    };\n  }\n\n  render() {\n    let { width, height, minY, maxY, tickPosition } = this.state;\n    return (\n      <Fragment>\n        <div>\n          width:\n          <input type=\"range\" min={400} max={1200} step={1}\n            value={width}\n            onChange={(ev) => this.setState({ width: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          height:\n          <input type=\"range\" min={200} max={800} step={1}\n            value={height}\n            onChange={(ev) => this.setState({ height: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          minY:\n          <input type=\"range\" min={-10000} max={maxY} step={1}\n            value={minY}\n            onChange={(ev) => this.setState({ minY: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div>\n          maxY:\n          <input type=\"range\" min={minY} max={10000} step={1}\n            value={maxY}\n            onChange={(ev) => this.setState({ maxY: Number.parseInt(ev.target.value) })} />\n        </div>\n        <div style={{ display: \"flex\" }}>\n          <YAxis widtDateXAxish={50} height={height}\n            minY={minY} maxY={maxY}\n            tickPosition=\"right\"\n          />\n          <YAxisSlabGrid width={width} height={height}\n            minY={minY} maxY={maxY}\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst App = (props) => {\n  return (\n    <Router>\n      <nav className=\"app\">\n        <Link to=\"/DateXAxis\">DateXAxis</Link>\n        <Link to=\"/DateVerticalLineGrid\">DateVerticalLineGrid</Link>\n        <Link to=\"/YAxis\">YAxisBundle</Link>\n        <Link to=\"/YAxisSlabGrid\">YAxisSlabGridBundle</Link>\n      </nav>\n      <Route path=\"/DateXAxis\" exact component={DateXAxisBundle} />\n      <Route path=\"/DateVerticalLineGrid\" exact component={DateVerticalLineGridBundle} />\n      <Route path=\"/YAxis\" exact component={YAxisBundle} />\n      <Route path=\"/YAxisSlabGrid\" exact component={YAxisSlabGridBundle} />\n    </Router>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}